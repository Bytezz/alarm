#!/usr/bin/env python3

# This file is part of Alarm.
# Alarm is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# Alarm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with
# Alarm. If not, see <https://www.gnu.org/licenses/>.

import gi
gi.require_version('Gst', '1.0')
from gi.repository import GObject, Gst, GLib
import sys
import os
import glob

# Get alarm sound
xdg_sound_theme_paths = [os.path.expanduser("~")+"/.local/share/sounds/", "/usr/share/sounds/", "/usr/share/sounds/freedesktop/stereo/"]
sound_file_path = ""
sound_theme_name = os.popen("dconf read /org/gnome/desktop/sound/theme-name").read()[1:-2]
sound_id = "alarm-clock-elapsed"

for path in xdg_sound_theme_paths:
    if path != xdg_sound_theme_paths[-1]:
        path += sound_theme_name
    if os.path.isdir(path):
        for fname in glob.glob(path+"/**/"+sound_id+"*", recursive=True):
            if os.path.isfile(fname):
                sound_file_path = fname
                break
        else:
            continue
        break

if sound_file_path != "":
    soundfile = sound_file_path
else:
    soundfile = "/usr/share/alarm/alarm.ogg"

volume = 0
volume_increment = 0.03

Gst.init(None)
mainloop = GLib.MainLoop()

pl = Gst.ElementFactory.make("playbin", "player")
pl.set_property('uri','file://'+os.path.abspath(soundfile))
pl.set_property('volume', volume)
pl.set_state(Gst.State.PLAYING)

def increase_volume():
    global volume
    volume = 1.0 if volume + volume_increment >= 1 else volume + volume_increment
    print(f"{round(volume*100)}%")
    pl.set_property('volume', volume)
    return volume < 1.0
GLib.timeout_add_seconds(1, increase_volume)

def bus_call(bus, message, loop):
    global pl
    if message.type == Gst.MessageType.EOS:
        pl.set_state(Gst.State.READY)
        pl.set_state(Gst.State.PLAYING)
    elif message.type == Gst.MessageType.ERROR:
        err, debug = message.parse_error()
        sys.stderr.write(f"Gst Error: {err}: {debug}\n")
        loop.quit()
    return True
bus = pl.get_bus()
bus.add_signal_watch()
bus.connect("message", bus_call, mainloop)

try:
    mainloop.run()
except:
    mainloop.quit()
